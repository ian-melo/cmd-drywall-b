//TODO: Testar
package cmd.novo.tela;

import cmd.controle.CalculoController;
import cmd.controle.ConstrucaoController;
import cmd.controle.MaterialController;
import cmd.entidade.Construcao;
import cmd.entidade.Item;
import cmd.entidade.Material;
import cmd.entidade.Pedidos;
import cmd.novo.GerenteDeJanelas;
import java.awt.Color;
import java.math.BigDecimal;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Usuario, ian-melo
 */
public class TCalculo extends javax.swing.JInternalFrame {

    GerenteDeJanelas gerenteDeJanelas;

    private int linConstrucao = -1;
    private int[] linMaterial = new int[0];
    private int linItem = -1;
    private List<Construcao> listaConstrucoes = null;
    private List<Construcao> listaConstrucoesMax = null;
    private List<Construcao> listaConstrucoesMaxOrd = null;
    private List<Double> guardaValor = null;//é utilizada para guardar o valor de listaConstrucoesMax
    private List<Double> guardaValorAux = null;
    private List<Item> listaItens = null;
    //private List<Item> listaItensMax = null;

    private float totalParcial = 0;

    private static Pedidos pp = null;

    private final CalculoController cControle = new CalculoController();

    public static TCalculo calculoT;

    public static TCalculo getInstancia() {
        if (calculoT == null) {
            calculoT = new TCalculo();
        }
        calculoT.limparTudo();
        return calculoT;
    }

    public static TCalculo getInstancia(Object obj) {

        pp = (Pedidos) obj;

        if (calculoT == null) {
            calculoT = new TCalculo();
        }

        return calculoT;
    }

    /**
     * Creates new form NewJFrame
     */
    public TCalculo() {
        initComponents();
        getContentPane().setBackground(Color.WHITE);
        pnl_alturaLargura.setBackground(Color.WHITE);
        pnl_ambiente.setBackground(Color.WHITE);
        pnl_botoes.setBackground(Color.WHITE);
        pnl_valor.setBackground(Color.WHITE);
        pnl_portaJanela.setBackground(Color.WHITE);
        pnl_multiplicacao.setBackground(Color.WHITE);
        pnl_maxMin.setBackground(Color.WHITE);

    }

//    public TCalculo(Object obj) {
//        initComponents();
//        getContentPane().setBackground(Color.WHITE);
//        pnl_alturaLargura.setBackground(Color.WHITE);
//        pnl_ambiente.setBackground(Color.WHITE);
//        pnl_botoes.setBackground(Color.WHITE);
//        pnl_valor.setBackground(Color.WHITE);
//        pnl_portaJanela.setBackground(Color.WHITE);
//        pnl_multiplicacao.setBackground(Color.WHITE);
//
//        pp = (Pedidos) obj;
//   
//
//    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rdGrup_portas = new javax.swing.ButtonGroup();
        rdGrup_janelas = new javax.swing.ButtonGroup();
        rdGrup_maoDeObra = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        pnl_botoes = new javax.swing.JPanel();
        btn_verificar = new javax.swing.JButton();
        btn_cancelar = new javax.swing.JButton();
        btn_Ok = new javax.swing.JButton();
        btn_limpar = new javax.swing.JButton();
        btn_nova = new javax.swing.JButton();
        pnl_portaJanela = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txt_porta = new javax.swing.JFormattedTextField();
        txt_janela = new javax.swing.JFormattedTextField();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        pnl_ambiente = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        chk_st = new javax.swing.JCheckBox();
        chk_rf = new javax.swing.JCheckBox();
        chk_ru = new javax.swing.JCheckBox();
        pnl_alturaLargura = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txt_altura = new javax.swing.JFormattedTextField();
        txt_largura = new javax.swing.JFormattedTextField();
        jLabel20 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        btn_conAdicionar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tb_itens = new javax.swing.JTable();
        btn_conRemover = new javax.swing.JButton();
        btn_conLimpar = new javax.swing.JButton();
        pnl_multiplicacao = new javax.swing.JPanel();
        txt_portaVezes1 = new javax.swing.JFormattedTextField();
        txt_janelaVezes1 = new javax.swing.JFormattedTextField();
        txt_portaVezes2 = new javax.swing.JFormattedTextField();
        txt_janelaVezes2 = new javax.swing.JFormattedTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane_pai = new javax.swing.JScrollPane();
        pnl_filho = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tb_materiais = new javax.swing.JTable();
        pnl_valor = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        lbl_valTotal = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tb_construcoes = new javax.swing.JTable();
        pnl_maxMin = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        sld_max = new javax.swing.JSlider();
        sld_min = new javax.swing.JSlider();
        chk_habilita = new javax.swing.JCheckBox();
        txt_max = new javax.swing.JFormattedTextField();
        txt_min = new javax.swing.JFormattedTextField();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cálculo de Drywall");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Bem-vindo à área de Cáculo de Drywall");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setText("Escolha a Construção:");

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel11.setText("Escolha o material (adicional):");

        btn_verificar.setBackground(new java.awt.Color(153, 153, 255));
        btn_verificar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btn_verificar.setText("Verificar tipologias");
        btn_verificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_verificarActionPerformed(evt);
            }
        });

        btn_cancelar.setBackground(new java.awt.Color(153, 153, 255));
        btn_cancelar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btn_cancelar.setText("Cancelar");
        btn_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelarActionPerformed(evt);
            }
        });

        btn_Ok.setBackground(new java.awt.Color(153, 153, 255));
        btn_Ok.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btn_Ok.setText("OK");
        btn_Ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_OkActionPerformed(evt);
            }
        });

        btn_limpar.setBackground(new java.awt.Color(153, 153, 255));
        btn_limpar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btn_limpar.setText("Redefinir consulta");
        btn_limpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_limparActionPerformed(evt);
            }
        });

        btn_nova.setBackground(new java.awt.Color(153, 153, 255));
        btn_nova.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btn_nova.setText("Nova consulta");
        btn_nova.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_novaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnl_botoesLayout = new javax.swing.GroupLayout(pnl_botoes);
        pnl_botoes.setLayout(pnl_botoesLayout);
        pnl_botoesLayout.setHorizontalGroup(
            pnl_botoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_botoesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_botoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_Ok, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_limpar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_nova, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnl_botoesLayout.createSequentialGroup()
                        .addComponent(btn_verificar)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(btn_cancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnl_botoesLayout.setVerticalGroup(
            pnl_botoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_botoesLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_verificar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_nova)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_limpar)
                .addGap(18, 18, 18)
                .addComponent(btn_Ok)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_cancelar)
                .addContainerGap())
        );

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Área total das janelas (m²):");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Área total das portas (m²):");

        txt_porta.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00#"))));
        txt_porta.setToolTipText("");

        txt_janela.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00#"))));
        txt_janela.setToolTipText("");

        jLabel28.setBackground(new java.awt.Color(255, 0, 0));
        jLabel28.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(54, 54, 54));
        jLabel28.setText("(obrigatório)");
        jLabel28.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel28.setName(""); // NOI18N

        jLabel29.setBackground(new java.awt.Color(255, 0, 0));
        jLabel29.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(54, 54, 54));
        jLabel29.setText("(obrigatório)");
        jLabel29.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel29.setName(""); // NOI18N

        javax.swing.GroupLayout pnl_portaJanelaLayout = new javax.swing.GroupLayout(pnl_portaJanela);
        pnl_portaJanela.setLayout(pnl_portaJanelaLayout);
        pnl_portaJanelaLayout.setHorizontalGroup(
            pnl_portaJanelaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_portaJanelaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_portaJanelaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_portaJanelaLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_janela, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnl_portaJanelaLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_porta, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel28)
                    .addComponent(jLabel29))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        pnl_portaJanelaLayout.setVerticalGroup(
            pnl_portaJanelaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_portaJanelaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_portaJanelaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txt_porta, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel28)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnl_portaJanelaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txt_janela, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel29)
                .addContainerGap())
        );

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Cond. de ambiente:");

        jLabel30.setBackground(new java.awt.Color(255, 0, 0));
        jLabel30.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(54, 54, 54));
        jLabel30.setText("(obrigatório)");
        jLabel30.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel30.setName(""); // NOI18N

        chk_st.setText("Seco (ST)");

        chk_rf.setText("Resistência a fogo (RF)");

        chk_ru.setText("Resistência a umidade (RU)");

        javax.swing.GroupLayout pnl_ambienteLayout = new javax.swing.GroupLayout(pnl_ambiente);
        pnl_ambiente.setLayout(pnl_ambienteLayout);
        pnl_ambienteLayout.setHorizontalGroup(
            pnl_ambienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_ambienteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_ambienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_ambienteLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel30))
                    .addComponent(chk_st)
                    .addComponent(chk_rf)
                    .addComponent(chk_ru))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        pnl_ambienteLayout.setVerticalGroup(
            pnl_ambienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_ambienteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_ambienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel30))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chk_st)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chk_rf)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chk_ru)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Altura da parede (m):");

        txt_altura.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00#"))));
        txt_altura.setToolTipText("");

        txt_largura.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00#"))));
        txt_largura.setToolTipText("");

        jLabel20.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel20.setText("Perímetro total da parede (m):");

        jLabel25.setBackground(new java.awt.Color(255, 0, 0));
        jLabel25.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(54, 54, 54));
        jLabel25.setText("(obrigatório)");
        jLabel25.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel25.setName(""); // NOI18N

        jLabel26.setBackground(new java.awt.Color(255, 0, 0));
        jLabel26.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(54, 54, 54));
        jLabel26.setText("(obrigatório)");
        jLabel26.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel26.setName(""); // NOI18N

        javax.swing.GroupLayout pnl_alturaLarguraLayout = new javax.swing.GroupLayout(pnl_alturaLargura);
        pnl_alturaLargura.setLayout(pnl_alturaLarguraLayout);
        pnl_alturaLarguraLayout.setHorizontalGroup(
            pnl_alturaLarguraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_alturaLarguraLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_alturaLarguraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_alturaLarguraLayout.createSequentialGroup()
                        .addComponent(jLabel20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel26)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pnl_alturaLarguraLayout.createSequentialGroup()
                        .addGroup(pnl_alturaLarguraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_largura, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_altura, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnl_alturaLarguraLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel25)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        pnl_alturaLarguraLayout.setVerticalGroup(
            pnl_alturaLarguraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_alturaLarguraLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_alturaLarguraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel25))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_altura, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnl_alturaLarguraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(jLabel26))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_largura, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 12, Short.MAX_VALUE))
        );

        jLabel27.setBackground(new java.awt.Color(255, 0, 0));
        jLabel27.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(54, 54, 54));
        jLabel27.setText("(obrigatório)");
        jLabel27.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel27.setName(""); // NOI18N

        btn_conAdicionar.setBackground(new java.awt.Color(153, 153, 255));
        btn_conAdicionar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btn_conAdicionar.setText("Adicionar");
        btn_conAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_conAdicionarActionPerformed(evt);
            }
        });

        tb_itens.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tb_itens.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Cód. construção", "Tipo construção", "Altura (m)", "Largura (m)", "Área da porta (m²)", "Área da janela (m²)", "Preço total"
            }
        ));
        tb_itens.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tb_itensMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tb_itens);

        btn_conRemover.setBackground(new java.awt.Color(153, 153, 255));
        btn_conRemover.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btn_conRemover.setText("Remover");
        btn_conRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_conRemoverActionPerformed(evt);
            }
        });

        btn_conLimpar.setBackground(new java.awt.Color(153, 153, 255));
        btn_conLimpar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btn_conLimpar.setText("Limpar");
        btn_conLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_conLimparActionPerformed(evt);
            }
        });

        txt_portaVezes1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,###.###"))));
        txt_portaVezes1.setToolTipText("");
        txt_portaVezes1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_portaVezes1FocusLost(evt);
            }
        });

        txt_janelaVezes1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,###.###"))));
        txt_janelaVezes1.setToolTipText("");
        txt_janelaVezes1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_janelaVezes1FocusLost(evt);
            }
        });

        txt_portaVezes2.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,###.###"))));
        txt_portaVezes2.setToolTipText("");
        txt_portaVezes2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_portaVezes2FocusLost(evt);
            }
        });

        txt_janelaVezes2.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,###.###"))));
        txt_janelaVezes2.setToolTipText("");
        txt_janelaVezes2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_janelaVezes2FocusLost(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("OU");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("OU");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("X");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setText("X");

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel13.setText("Digite a altura e a largura (cálculo automático):");

        javax.swing.GroupLayout pnl_multiplicacaoLayout = new javax.swing.GroupLayout(pnl_multiplicacao);
        pnl_multiplicacao.setLayout(pnl_multiplicacaoLayout);
        pnl_multiplicacaoLayout.setHorizontalGroup(
            pnl_multiplicacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_multiplicacaoLayout.createSequentialGroup()
                .addGroup(pnl_multiplicacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_multiplicacaoLayout.createSequentialGroup()
                        .addGroup(pnl_multiplicacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnl_multiplicacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnl_multiplicacaoLayout.createSequentialGroup()
                                .addComponent(txt_portaVezes1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_portaVezes2, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnl_multiplicacaoLayout.createSequentialGroup()
                                .addComponent(txt_janelaVezes1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_janelaVezes2, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jLabel13))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnl_multiplicacaoLayout.setVerticalGroup(
            pnl_multiplicacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_multiplicacaoLayout.createSequentialGroup()
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnl_multiplicacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_portaVezes1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel9)
                    .addComponent(txt_portaVezes2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(pnl_multiplicacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txt_janelaVezes1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(txt_janelaVezes2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28))
        );

        tb_materiais.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tb_materiais.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Cód material", "Tipo", "Descrição", "Const. metro", "Preço unit.", "Qtde. min."
            }
        ));
        tb_materiais.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tb_materiaisMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tb_materiais);

        javax.swing.GroupLayout pnl_filhoLayout = new javax.swing.GroupLayout(pnl_filho);
        pnl_filho.setLayout(pnl_filhoLayout);
        pnl_filhoLayout.setHorizontalGroup(
            pnl_filhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_filhoLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 774, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 36, Short.MAX_VALUE))
        );
        pnl_filhoLayout.setVerticalGroup(
            pnl_filhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
        );

        jScrollPane_pai.setViewportView(pnl_filho);

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel15.setText("Valor parcial do drywall: ");

        lbl_valTotal.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel17.setText("R$");

        javax.swing.GroupLayout pnl_valorLayout = new javax.swing.GroupLayout(pnl_valor);
        pnl_valor.setLayout(pnl_valorLayout);
        pnl_valorLayout.setHorizontalGroup(
            pnl_valorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_valorLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_valorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_valorLayout.createSequentialGroup()
                        .addGap(0, 9, Short.MAX_VALUE)
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbl_valTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnl_valorLayout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnl_valorLayout.setVerticalGroup(
            pnl_valorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_valorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnl_valorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_valTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        jScrollPane4.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        tb_construcoes.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tb_construcoes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Cód.", "Tipo constr.", "Descrição", "Q"
            }
        ));
        tb_construcoes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tb_construcoesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tb_construcoes);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 765, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
        );

        jScrollPane4.setViewportView(jPanel1);

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Variação de Preço:");

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel14.setText("Valor Máximo:");

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel16.setText("Valor Mínimo: ");

        sld_max.setMaximum(10000);
        sld_max.setValue(10000);
        sld_max.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sld_maxStateChanged(evt);
            }
        });

        sld_min.setMaximum(10000);
        sld_min.setValue(0);
        sld_min.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sld_minStateChanged(evt);
            }
        });

        chk_habilita.setSelected(true);
        chk_habilita.setText("Habilitar");
        chk_habilita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chk_habilitaActionPerformed(evt);
            }
        });

        txt_max.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        txt_max.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_maxFocusLost(evt);
            }
        });

        txt_min.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        txt_min.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_minFocusLost(evt);
            }
        });

        javax.swing.GroupLayout pnl_maxMinLayout = new javax.swing.GroupLayout(pnl_maxMin);
        pnl_maxMin.setLayout(pnl_maxMinLayout);
        pnl_maxMinLayout.setHorizontalGroup(
            pnl_maxMinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_maxMinLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_maxMinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_maxMinLayout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_min, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(sld_max, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sld_min, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnl_maxMinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnl_maxMinLayout.createSequentialGroup()
                            .addComponent(jLabel14)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txt_max))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnl_maxMinLayout.createSequentialGroup()
                            .addComponent(jLabel8)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(chk_habilita))))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        pnl_maxMinLayout.setVerticalGroup(
            pnl_maxMinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_maxMinLayout.createSequentialGroup()
                .addGroup(pnl_maxMinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(chk_habilita))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnl_maxMinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(txt_max, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addComponent(sld_max, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnl_maxMinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(txt_min, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(sld_min, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1)
                            .addComponent(pnl_portaJanela, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pnl_alturaLargura, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(pnl_ambiente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(pnl_valor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(pnl_multiplicacao, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pnl_maxMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(pnl_botoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel27))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btn_conAdicionar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_conRemover, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_conLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane_pai, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pnl_ambiente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pnl_valor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(pnl_multiplicacao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pnl_maxMin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(pnl_botoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addGap(18, 18, 18)
                            .addComponent(pnl_alturaLargura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(pnl_portaJanela, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel27)
                    .addComponent(jLabel11))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_conAdicionar)
                            .addComponent(btn_conRemover)
                            .addComponent(btn_conLimpar)))
                    .addComponent(jScrollPane_pai, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(43, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_verificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_verificarActionPerformed
        //verificar();
//Necessario testar
        if (chk_habilita.isSelected()) {
            verificaValorMax();
        } else {
            verificar();
        }

    }//GEN-LAST:event_btn_verificarActionPerformed

    private void btn_limparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_limparActionPerformed
        redefinir();
    }//GEN-LAST:event_btn_limparActionPerformed

    private void btn_OkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_OkActionPerformed
//        if (chk_habilita.isSelected()) {
//            finalizarMax();
//        } else {
        finalizar();
//        }
    }//GEN-LAST:event_btn_OkActionPerformed

    private void btn_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelarActionPerformed
        cancelar();
//        JOptionPane.showMessageDialog(pnl_ambiente, tb_materiais.getSelectedRows().length);
//
//        int[] linMa = new int[0];
//        linMa = tb_materiais.getSelectedRows();
//
//        JOptionPane.showMessageDialog(pnl_ambiente, linMa);
//
//        for (int i : linMa) {
//            JOptionPane.showMessageDialog(pnl_ambiente, "i= " + i);
//        }


    }//GEN-LAST:event_btn_cancelarActionPerformed

    private void btn_conAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_conAdicionarActionPerformed

        if (chk_habilita.isSelected()) {
            adicionarMaxBotao();
        } else {
            adicionar();
        }

    }//GEN-LAST:event_btn_conAdicionarActionPerformed

    private void btn_conRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_conRemoverActionPerformed
        remover();
    }//GEN-LAST:event_btn_conRemoverActionPerformed

    private void btn_conLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_conLimparActionPerformed
        limpar();
    }//GEN-LAST:event_btn_conLimparActionPerformed

    private void btn_novaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_novaActionPerformed
        novo();
    }//GEN-LAST:event_btn_novaActionPerformed

    private void tb_construcoesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tb_construcoesMouseClicked
        if (evt.getClickCount() == 1
                && tb_construcoes.getModel().getValueAt(tb_construcoes.getSelectedRow(), 0) != null) {
            linConstrucao = tb_construcoes.getSelectedRow();

            //if (chk_habilita.isSelected()) {
            //listarMateriaisMax();
            // } else {
            listarMateriais();
            //}

        }

        int linha = tb_construcoes.getSelectedRow();
        int coluna = tb_construcoes.getSelectedColumn();

        if (coluna == 2 || coluna == 3) {
            JOptionPane.showMessageDialog(null, tb_construcoes.getValueAt(linha, coluna).toString());
        }


    }//GEN-LAST:event_tb_construcoesMouseClicked

    private void tb_materiaisMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tb_materiaisMouseClicked
        if (evt.getClickCount() == 1
                && tb_materiais.getModel().getValueAt(tb_materiais.getSelectedRow(), 0) != null) {
            linMaterial = tb_materiais.getSelectedRows();
        }

        int linha = tb_materiais.getSelectedRow();
        int coluna = tb_materiais.getSelectedColumn();

        if (coluna == 3) {
            JOptionPane.showMessageDialog(null, tb_materiais.getValueAt(linha, coluna).toString());
        }


    }//GEN-LAST:event_tb_materiaisMouseClicked

    private void tb_itensMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tb_itensMouseClicked
        if (evt.getClickCount() == 1
                && tb_itens.getModel().getValueAt(tb_itens.getSelectedRow(), 0) != null) {
            linItem = tb_itens.getSelectedRow();
        }
    }//GEN-LAST:event_tb_itensMouseClicked

    private void txt_portaVezes1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_portaVezes1FocusLost
//        txt_portaVezes1.setText(txt_portaVezes1.getText().trim());
//        txt_portaVezes2.setText(txt_portaVezes2.getText().trim());
//        txt_janelaVezes1.setText(txt_janelaVezes1.getText().trim());
//        txt_janelaVezes2.setText(txt_janelaVezes2.getText().trim());
        fazerMultiplicacaoPorta();
    }//GEN-LAST:event_txt_portaVezes1FocusLost

    private void txt_portaVezes2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_portaVezes2FocusLost
        fazerMultiplicacaoPorta();
    }//GEN-LAST:event_txt_portaVezes2FocusLost

    private void txt_janelaVezes1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_janelaVezes1FocusLost
        fazerMultiplicacaoJanela();
    }//GEN-LAST:event_txt_janelaVezes1FocusLost

    private void txt_janelaVezes2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_janelaVezes2FocusLost
        fazerMultiplicacaoJanela();
    }//GEN-LAST:event_txt_janelaVezes2FocusLost

    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated

        if (pp != null) {
            calculoT.limparTudo();
            setValoresOutroForm(pp);

        }
    }//GEN-LAST:event_formInternalFrameActivated

    private void chk_habilitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chk_habilitaActionPerformed
        if (chk_habilita.isSelected()) {
            sldVariacao(true);
            limparSld();

        } else {
            sldVariacao(false);
        }
    }//GEN-LAST:event_chk_habilitaActionPerformed


    private void sld_maxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sld_maxStateChanged
        txt_max.setText(String.valueOf(sld_max.getValue()));

        if (sld_min.getValue() > sld_max.getValue()) {
            sld_min.setValue(sld_max.getValue());
        }
    }//GEN-LAST:event_sld_maxStateChanged

    private void sld_minStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sld_minStateChanged
        txt_min.setText(String.valueOf(sld_min.getValue()));

        if (sld_min.getValue() > sld_max.getValue()) {
            sld_max.setValue(sld_min.getValue());
        }
    }//GEN-LAST:event_sld_minStateChanged

    private void txt_maxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_maxFocusLost
       // try {

        //NumberFormat nf = NumberFormat.getCurrencyInstance();
        NumberFormat nf = NumberFormat.getIntegerInstance();

        float num = Float.parseFloat(txt_max.getText());
        //String s = nf.format(num);

        int val = (int) num;

        sld_max.setValue(val);

//        } catch (Exception e) {
//            System.err.println(e);
//            JOptionPane.showMessageDialog(null, "Houve um erro na conversão, digite um numero inteiro");
//            txt_max.setText("10.000");
//            sld_max.setValue(10000);
//        }
    }//GEN-LAST:event_txt_maxFocusLost

    private void txt_minFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_minFocusLost
        try {
            sld_min.setValue(Integer.parseInt(txt_min.getText()));
        } catch (Exception e) {
            System.out.println(e);
            JOptionPane.showMessageDialog(null, "Houve um erro na conversão, digite um numero inteiro");
            txt_min.setText("0");
            sld_min.setValue(0);
        }
    }//GEN-LAST:event_txt_minFocusLost

    private void fazerMultiplicacaoJanela() {
        if (txt_janelaVezes1.getText().isEmpty() || txt_janelaVezes2.getText().isEmpty()) {
            return;
        }

        double altura, largura, val;
        try {
            altura = Double.parseDouble(txt_janelaVezes1.getText().replaceAll(",", "."));
            largura = Double.parseDouble(txt_janelaVezes2.getText().replaceAll(",", "."));
            val = altura * largura;
            //System.out.println(val);//Teste
            txt_janela.setText((String.valueOf(val)));
            //txt_janela.setText(txt_janela.getText().replaceFirst(".", ","));
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Preencha corretamente os campos.");
        } catch (Exception e) {
            System.out.println("_3_" + e);
        }
    }

    private void fazerMultiplicacaoPorta() {
        if (txt_portaVezes1.getText().isEmpty() || txt_portaVezes2.getText().isEmpty()) {
            return;
        }

        double altura, largura, val;
        try {
            altura = Double.parseDouble(txt_portaVezes1.getText().replaceAll(",", "."));
            largura = Double.parseDouble(txt_portaVezes2.getText().replaceAll(",", "."));
            val = altura * largura;
            //System.out.println(val);//Teste
            txt_porta.setText((String.valueOf(val)).replaceAll(".", ","));

            //txt_porta.setText(txt_porta.getText().replaceFirst(".", ","));
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Preencha corretamente os campos.");
        } catch (Exception e) {
            System.out.println("_3_" + e);
        }
    }

    private void verificar() {
        if (!validarCampos()) {
            return;
        }

        double altura = Double.parseDouble(txt_altura.getText().replaceAll(",", "."));
        listaConstrucoes = cControle.procurarTipologias(chk_st.isSelected(), chk_ru.isSelected(),
                chk_rf.isSelected(), altura);
        //JOptionPane.showMessageDialog(rootPane, listaConstrucoes.size()); //Teste
        if (listaConstrucoes == null || listaConstrucoes.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Construções não encontradas.");
            return;
        }

        habilitarCampos(false);
        listarConstrucoes();
    }

    private void verificaValorMax() {
        if (!validarCampos()) {
            return;
        }
        double altura = Double.parseDouble(txt_altura.getText().replaceAll(",", "."));
        listaConstrucoes = cControle.procurarTipologias(chk_st.isSelected(), chk_ru.isSelected(),
                chk_rf.isSelected(), altura);
        //JOptionPane.showMessageDialog(rootPane, listaConstrucoes.size()); //Teste
        if (listaConstrucoes == null || listaConstrucoes.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Construções não encontradas.");
            return;
        }
        habilitarCampos(false);
        sldVariacao(true);//Permite alterar o preço, apenas (vl max e min)
        adicionarMax();
        listarConstrucoesMax();
    }

    private void finalizar() {
        if (listaItens == null) {
            JOptionPane.showMessageDialog(null, "Não há nenhum item formado!");
            return;
        }

        TOrcamento.getInstancia(false).listarItens(listaItens);
        limparTudo();
        dispose();
    }

//    private void finalizarMax() {
//        if (listaItensMax == null) {
//            JOptionPane.showMessageDialog(null, "Não há nenhum item formado!");
//            return;
//        }
//
//        TOrcamento.getInstancia(false).listarItens(listaItensMax);
//        limparTudo();
//        dispose();
//    }
    private void cancelar() {
        limparTudo();
        dispose();
    }

    private void redefinir() {
        limparTudo();
    }

    private void novo() {
        limparCampos();
        limparTConstrucoes();
        limparTMateriais();
    }

    private void adicionar() {

        if (linConstrucao < 0) {
            return;
        }
        //Vars
        ConstrucaoController contc = new ConstrucaoController();
        MaterialController contm = new MaterialController();
        List<Material> mOp = new ArrayList<>();
        Construcao c;
        Item it;

        //Construção
        c = listaConstrucoes.get(linConstrucao);
        //Materiais adicionais
        for (int i : linMaterial) {
            for (Object o : c.getMaterials()) {
                if (((Material) o).getEhOpcional() && ((Material) o).getCodMaterial() == Integer.parseInt(tb_materiais.getModel().getValueAt(i, 0).toString())) {
                    mOp.add((Material) o);
                    break;
                }
            }
        }
        //Adição
        if (listaItens == null) {
            listaItens = new ArrayList<>();
        }
        it = cControle.definirItem(
                Double.parseDouble(txt_altura.getText().replaceAll(",", ".")),
                Double.parseDouble(txt_largura.getText().replaceAll(",", ".")),
                Double.parseDouble(txt_porta.getText().replaceAll(",", ".")),
                Double.parseDouble(txt_janela.getText().replaceAll(",", ".")), c, mOp);

        //Continuar
//        Double dd = Double.valueOf(txt_valorPlaca.getText());
//        BigDecimal bbb = BigDecimal.valueOf(dd);
//        BigDecimal bbb = new BigDecimal(txt_valorPlaca.getText());
//        BigDecimal qqq = it.getPrecoTotal().multiply(bbb);
//        //String 
//        it.setPrecoTotal(new BigDecimal(qqq.toString()));
        totalParcial += it.getPrecoTotal().doubleValue();//Mostra na Label
        //it.setPrecoTotal(new BigDecimal("0"));

        NumberFormat nf = NumberFormat.getCurrencyInstance();
        String s = nf.format(totalParcial);

        //lbl_valTotal.setText(String.valueOf(totalParcial).replace(".", ","));//Mostra
        lbl_valTotal.setText(s.replace("R$ ", ""));//Mostra

        //Continuar
        listaItens.add(it);
        listarItens();
    }

    private void adicionarMaxBotao() {

        if (linConstrucao < 0) {
            return;
        }
        //Vars

        List<Material> mOp = new ArrayList<>();
        Construcao c;
        Item it;

        double fatorMultParede = 0;
        //Construção
        c = listaConstrucoesMax.get(linConstrucao);
        //Materiais adicionais
        for (int i : linMaterial) {
            for (Object o : c.getMaterials()) {
                if (((Material) o).getEhOpcional() && ((Material) o).getCodMaterial() == Integer.parseInt(tb_materiais.getModel().getValueAt(i, 0).toString())) {
                    mOp.add((Material) o);
                    break;
                }
            }
        }
        //Adição
        if (listaItens == null) {
            listaItens = new ArrayList<>();
        }
        it = cControle.definirItem(
                Double.parseDouble(txt_altura.getText().replaceAll(",", ".")),
                Double.parseDouble(txt_largura.getText().replaceAll(",", ".")),
                Double.parseDouble(txt_porta.getText().replaceAll(",", ".")),
                Double.parseDouble(txt_janela.getText().replaceAll(",", ".")), c, mOp);

        totalParcial += it.getPrecoTotal().doubleValue();//Mostra na Label

        NumberFormat nf = NumberFormat.getCurrencyInstance();
        String s = nf.format(totalParcial);

        lbl_valTotal.setText(s.replace("R$ ", ""));//Mostra

        //Continuar
        listaItens.add(it);
        listarItens();
    }

    private void adicionarMax() {
        listaConstrucoesMax = new ArrayList<>();
        guardaValor = new ArrayList<>();
        int valor = listaConstrucoes.size();
        //Vars
        boolean encontrado = false;
        List<Material> mOp = new ArrayList<>();
        Construcao c = null;
        Item it;

        //listaConstrucoesMaxAux.add(c);
        //Construção
        for (int i = 0; i < valor; i++) {

            c = listaConstrucoes.get(i);

//            JOptionPane.showMessageDialog(pnl_ambiente, c.getCodConstrucao());
//            JOptionPane.showMessageDialog(pnl_ambiente, c.getDescricao());
//            JOptionPane.showMessageDialog(pnl_ambiente, c.getDetalhes());
            //Materiais adicionais
            for (Object o : c.getMaterials()) {//Deve fazer q add todos
                mOp.add((Material) o);
                break;

            }

            //Adição
            if (listaConstrucoesMax == null) {
                listaConstrucoesMax = new ArrayList<>();
            }
            it = cControle.definirItem(
                    Double.parseDouble(txt_altura.getText().replaceAll(",", ".")),
                    Double.parseDouble(txt_largura.getText().replaceAll(",", ".")),
                    Double.parseDouble(txt_porta.getText().replaceAll(",", ".")),
                    Double.parseDouble(txt_janela.getText().replaceAll(",", ".")), c, mOp);

            //totalParcial += it.getPrecoTotal().doubleValue();//Mostra na Label
            //it.setPrecoTotal(new BigDecimal("0"));
            //lbl_valTotal.setText(String.valueOf(totalParcial));//Mostra
            //JOptionPane.showMessageDialog(null, c.getCodConstrucao());
            //if (totalParcial <= Double.valueOf(txt_max.getText())) {
            int maximo = sld_max.getValue();
            int minimo = sld_min.getValue();

            if (it.getPrecoTotal().doubleValue() <= maximo && it.getPrecoTotal().doubleValue() >= minimo) {
                encontrado = true;
                //JOptionPane.showMessageDialog(pnl_ambiente, listaConstrucoesMaxAux.size());
                listaConstrucoesMax.add(c);
                guardaValor.add(it.getPrecoTotal().doubleValue());//Mesmo index de listaConstrucoesMax
                //listaItensMax.add(it);
            }

            //listarItensMax();
        }
        if (encontrado == false) {
            JOptionPane.showMessageDialog(null, "Não foi encontrada nenhuma tipologia nesta faixa de preço");
        }
        construcoesMaxOrdenado();

    }

    private void construcoesMaxOrdenado() {
        int i = 0;
        int indexMaior = 0;
        double maior = 0;
        boolean alterado = false;
        listaConstrucoesMaxOrd = new ArrayList<>();

        for (int j = 0; j < guardaValor.size(); j++) {

            for (Double d : guardaValor) {
                if (i == 0) {
                    maior = d;
                    indexMaior = i;
                }

                if (maior < d) {
                    maior = d;//Seleciona o maior
                    indexMaior = i;
                    alterado = true;
                }
                //System.out.println("_i_______" + i);
                i++;//index
            }
            i = 0;
            maior = 0;
            //System.out.println("_j_f_" + j);
            if (alterado) {
                //System.out.println("_j__" + j);
                guardaValor.remove(indexMaior);//Retira o maior
                listaConstrucoesMaxOrd.add(listaConstrucoesMax.get(indexMaior));//Seta o maior como primeiro valor
                listaConstrucoesMax.remove(indexMaior);
                alterado = false;
                j = 0;//Continua o loop
            }
        }
        listaConstrucoesMax = new ArrayList<>();
        //listaConstrucoesMax.clear();
        try {
            for (int k = listaConstrucoesMaxOrd.size(); k > 0; k--) {
                listaConstrucoesMax.add(listaConstrucoesMaxOrd.get(k - 1));//inverte

            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "ERRO: " + e);
        }

        //listaConstrucoesMax = listaConstrucoesMaxOrd;
    }

    private void remover() {
        if (linItem < 0) {
            return;
        }

        Double val = Double.valueOf(tb_itens.getModel().getValueAt(linItem, 6).toString());
        totalParcial -= val;
        lbl_valTotal.setText(String.valueOf(totalParcial).replace(".", ","));//Mostra

        listaItens.remove(linItem);
        listarItens();
    }

    private void limpar() {
        limparTItens();
    }

    private void listarConstrucoes() {
        Vector tableHeaders = new Vector();
        //tableHeaders.add("Cód. constr.");
        tableHeaders.add("Cód.");
        tableHeaders.add("Tipo constr.");
        tableHeaders.add("Descrição");
        tableHeaders.add("Detalhes");
        tableHeaders.add("Q");

        Vector tableData = new Vector();
        Vector reg;
        for (Construcao c : listaConstrucoes) {
            reg = new Vector();
            reg.add(c.getCodConstrucao().toString());
            if (c.getParede() != null && c.getForro() == null) {
                reg.add("Parede");
            } else if (c.getParede() == null && c.getForro() != null) {
                reg.add("Forro");
            } else {
                reg.add("Desconhecido");
            }

            reg.add(c.getDescricao());
            reg.add(c.getDetalhes());
            reg.add(c.getQualidade().toString());
            tableData.add(reg);
        }
        tb_construcoes.setModel(new DefaultTableModel(tableData, tableHeaders));

        tb_construcoes.getColumnModel().getColumn(0).setMaxWidth(40);
        tb_construcoes.getColumnModel().getColumn(1).setMaxWidth(80);
//      tb_construcoes.getColumnModel().getColumn(1).setMaxWidth(70);
//     //tb_construcoes.getColumnModel().getColumn(0).setPreferredWidth(20);
        //tb_construcoes.getColumnModel().getColumn(0).setResizable(true);
//       tb_construcoes.getColumnModel().getColumn(2).setMaxWidth(90);
        tb_construcoes.getColumnModel().getColumn(4).setMaxWidth(40);

        linConstrucao = -1;
    }

    private void listarConstrucoesMax() {
        Vector tableHeaders = new Vector();
        //tableHeaders.add("Cód. constr.");
        tableHeaders.add("Cód.");
        tableHeaders.add("Tipo constr.");
        tableHeaders.add("Descrição");
        tableHeaders.add("Detalhes");
        tableHeaders.add("Q");

        Vector tableData = new Vector();
        Vector reg;
        for (Construcao c : listaConstrucoesMax) {
            reg = new Vector();
            reg.add(c.getCodConstrucao().toString());
            if (c.getParede() != null && c.getForro() == null) {
                reg.add("Parede");
            } else if (c.getParede() == null && c.getForro() != null) {
                reg.add("Forro");
            } else {
                reg.add("Desconhecido");
            }

            reg.add(c.getDescricao());
            reg.add(c.getDetalhes());
            reg.add(c.getQualidade().toString());
            tableData.add(reg);
        }
        tb_construcoes.setModel(new DefaultTableModel(tableData, tableHeaders));

        tb_construcoes.getColumnModel().getColumn(0).setMaxWidth(40);
        tb_construcoes.getColumnModel().getColumn(1).setMaxWidth(80);
        tb_construcoes.getColumnModel().getColumn(4).setMaxWidth(40);

        linConstrucao = -1;
    }

    private void listarMateriais() {
        Vector tableHeaders = new Vector();
        tableHeaders.add("Cód. material");
        tableHeaders.add("Tipo");
        tableHeaders.add("Descrição");
        tableHeaders.add("Const. metro");
        tableHeaders.add("Preço unit.");
        tableHeaders.add("Qtde. min.");

        Vector tableData = new Vector();
        Vector reg;
        Material m;
        for (Object o : listaConstrucoes.get(linConstrucao).getMaterials()) {
            m = (Material) o;
            if (m.getEhOpcional()) {
                reg = new Vector();
                reg.add(m.getCodMaterial());
                reg.add(m.getTipo());
                reg.add(m.getDescricao());
                reg.add(m.getConstanteMetro());
                reg.add("R$ " + String.valueOf(m.getPrecoUnitario()).replace(".", ","));
                reg.add(m.getQuantidadeMinima());
                tableData.add(reg);
            }
        }
        tb_materiais.setModel(new DefaultTableModel(tableData, tableHeaders));

        tb_materiais.getColumnModel().getColumn(0).setMaxWidth(100);
        tb_materiais.getColumnModel().getColumn(1).setMaxWidth(100);

        tb_materiais.getColumnModel().getColumn(3).setMaxWidth(100);
        tb_materiais.getColumnModel().getColumn(4).setMaxWidth(80);
        tb_materiais.getColumnModel().getColumn(5).setMaxWidth(70);

        linMaterial = new int[0];
    }

//    private void listarMateriaisMax() {
//        Vector tableHeaders = new Vector();
//        tableHeaders.add("Cód. material");
//        tableHeaders.add("Tipo");
//        tableHeaders.add("Descrição");
//        tableHeaders.add("Const. metro");
//        tableHeaders.add("Preço unit.");
//        tableHeaders.add("Qtde. min.");
//
//        Vector tableData = new Vector();
//        Vector reg;
//        Material m;
//        for (Object o : listaConstrucoesMax.get(linConstrucao).getMaterials()) {
//            m = (Material) o;
//            if (m.getEhOpcional()) {
//                reg = new Vector();
//                reg.add(m.getCodMaterial());
//                reg.add(m.getTipo());
//                reg.add(m.getDescricao());
//                reg.add(m.getConstanteMetro());
//                reg.add(m.getPrecoUnitario());
//                reg.add(m.getQuantidadeMinima());
//                tableData.add(reg);
//            }
//        }
//        tb_materiais.setModel(new DefaultTableModel(tableData, tableHeaders));
//
//        tb_materiais.getColumnModel().getColumn(0).setMaxWidth(100);
//        tb_materiais.getColumnModel().getColumn(1).setMaxWidth(100);
//
//        tb_materiais.getColumnModel().getColumn(3).setMaxWidth(100);
//        tb_materiais.getColumnModel().getColumn(4).setMaxWidth(80);
//        tb_materiais.getColumnModel().getColumn(5).setMaxWidth(70);
//
//        linMaterial = new int[0];
//    }
    private void listarItens() {
        Vector tableHeaders = new Vector();
        tableHeaders.add("Cód. construção");
        tableHeaders.add("Tipo construção");
        tableHeaders.add("Altura (m)");
        tableHeaders.add("Largura (m)");
        tableHeaders.add("Área da porta (m²)");
        tableHeaders.add("Área da janela (m²)");
        tableHeaders.add("Preço total");

        Vector tableData = new Vector();
        Vector reg;
        for (Item it : listaItens) {
            reg = new Vector();
            reg.add(it.getConstrucao().getCodConstrucao());
            if (it.getConstrucao().getParede() != null && it.getConstrucao().getForro() == null) {
                reg.add("Parede");
            } else if (it.getConstrucao().getParede() == null && it.getConstrucao().getForro() != null) {
                reg.add("Forro");
            } else {
                reg.add("Desconhecido");
            }
            reg.add(it.getAltura());
            reg.add(it.getLargura());
            reg.add(it.getAreaPorta());
            reg.add(it.getAreaJanela());

            BigDecimal bd = new BigDecimal(it.getPrecoTotal().toString());
            NumberFormat nf = NumberFormat.getCurrencyInstance();
            String s = nf.format(bd);

            //reg.add("R$ " + String.valueOf(it.getPrecoTotal()).replace(".", ","));
            reg.add(s);
            tableData.add(reg);
        }
        tb_itens.setModel(new DefaultTableModel(tableData, tableHeaders));
        linItem = -1;
    }

//    private void listarItensMax() {
//        Vector tableHeaders = new Vector();
//        tableHeaders.add("Cód. construção");
//        tableHeaders.add("Tipo construção");
//        tableHeaders.add("Altura (m)");
//        tableHeaders.add("Largura (m)");
//        tableHeaders.add("Área da porta (m²)");
//        tableHeaders.add("Área da janela (m²)");
//        tableHeaders.add("Preço total");
//
//        Vector tableData = new Vector();
//        Vector reg;
//        for (Item it : listaItensMax) {
//            reg = new Vector();
//            reg.add(it.getConstrucao().getCodConstrucao());
//            if (it.getConstrucao().getParede() != null && it.getConstrucao().getForro() == null) {
//                reg.add("Parede");
//            } else if (it.getConstrucao().getParede() == null && it.getConstrucao().getForro() != null) {
//                reg.add("Forro");
//            } else {
//                reg.add("Desconhecido");
//            }
//            reg.add(it.getAltura());
//            reg.add(it.getLargura());
//            reg.add(it.getAreaPorta());
//            reg.add(it.getAreaJanela());
//            reg.add(it.getPrecoTotal());
//            tableData.add(reg);
//        }
//        tb_itens.setModel(new DefaultTableModel(tableData, tableHeaders));
//        linItem = -1;
//    }
    private boolean validarCampos() {
        if (txt_altura.getText().isEmpty() || txt_largura.getText().isEmpty()
                || !(chk_st.isSelected() || chk_rf.isSelected() || chk_ru.isSelected())) {
            JOptionPane.showMessageDialog(rootPane, "Preencha os campos obrigatórios.");
            return false;
        }
        try {
            Double.parseDouble(txt_altura.getText().replaceAll(",", "."));
            Double.parseDouble(txt_largura.getText().replaceAll(",", "."));
            Double.parseDouble(txt_porta.getText().replaceAll(",", "."));
            Double.parseDouble(txt_janela.getText().replaceAll(",", "."));
            return true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(rootPane, "Preencha corretamente os campos.");
            return false;
        }
    }

    private void limparTudo() {
        limparCampos();
        limparTabelas();
    }

    private void limparCampos() {
        txt_altura.setText("");
        txt_largura.setText("");
        txt_porta.setText("");
        txt_janela.setText("");
        txt_portaVezes1.setText("");
        txt_portaVezes2.setText("");
        txt_janelaVezes1.setText("");
        txt_janelaVezes2.setText("");
        chk_st.setSelected(false);
        chk_rf.setSelected(false);
        chk_ru.setSelected(false);
        lbl_valTotal.setText("");
        habilitarCampos(true);
        limparSld();
        sldVariacao(true);
        chk_habilita.setSelected(true);

    }

    private void limparSld() {
        txt_max.setText("10000");
        sld_max.setValue(10000);
        txt_min.setText("0");
        sld_min.setValue(0);
    }

    private void sldVariacao(boolean val) {
        sld_max.setEnabled(val);
        sld_min.setEnabled(val);
    }

    private void habilitarCampos(boolean val) {
        txt_altura.setEnabled(val);
        txt_largura.setEnabled(val);
        txt_porta.setEnabled(val);
        txt_portaVezes1.setEnabled(val);
        txt_portaVezes2.setEnabled(val);
        txt_janelaVezes1.setEnabled(val);
        txt_janelaVezes2.setEnabled(val);
        txt_janela.setEnabled(val);
        chk_st.setEnabled(val);
        chk_ru.setEnabled(val);
        chk_rf.setEnabled(val);
        chk_habilita.setEnabled(val);
        sldVariacao(val);

    }

    private void limparTabelas() {
        limparTConstrucoes();
        limparTMateriais();
        limparTItens();
    }

    private void limparTConstrucoes() {
        tb_construcoes.setModel(new javax.swing.table.DefaultTableModel(
                null,
                new String[]{
                    "Cód.", "Tipo constr.", "Descrição", "Qualidade"
                }
        ));
        linConstrucao = -1;
        listaConstrucoes = null;

        listaConstrucoes = null;
        listaConstrucoesMax = null;
    }

    private void limparTMateriais() {
        tb_materiais.setModel(new javax.swing.table.DefaultTableModel(
                null,
                new String[]{
                    "Cód material", "Tipo", "Descrição", "Const. metro", "Preço unit.", "Qtde. min."
                }
        ));
        linMaterial = new int[0];
    }

    private void limparTItens() {
        tb_itens.setModel(new javax.swing.table.DefaultTableModel(
                null,
                new String[]{
                    "Cód. constr.", "Altura", "Largura", "Área porta (m²)", "Área janela (m²)", "Preço total"
                }
        ));
        linItem = -1;
        listaItens = null;

        totalParcial = 0;
        lbl_valTotal.setText("");
    }

    private void setValoresOutroForm(Pedidos ped) {
        //txt_altura.setText(String.valueOf(TSolicaoOrcamento.ped.getAltura()));

        txt_altura.setText(String.valueOf(ped.getAltura()));
        txt_largura.setText(String.valueOf(ped.getLargura()));

        float totalPorta = ped.getAltura_porta() * ped.getLargura_porta();
        float totalJanela = ped.getAltura_janela() * ped.getLargura_janela();

        if (ped.getQtd_porta() > 0) {
            totalPorta = totalPorta * ped.getQtd_porta();
        }

        if (ped.getQtd_janela() > 0) {
            totalPorta = totalJanela * ped.getQtd_janela();
        }

        txt_porta.setText(String.valueOf(totalPorta));
        txt_janela.setText(String.valueOf(totalJanela));

        if ("Seco".equals(ped.getAmbiente())) {
            chk_st.setSelected(true);
        }

        if ("Úmido".equals(ped.getAmbiente())) {
            chk_ru.setSelected(true);
        }

        if ("Resistente a fogo".equals(ped.getAmbiente())) {
            chk_rf.setSelected(true);
        }
        JOptionPane.showMessageDialog(null, ped.getAmbiente());
        try {
            sld_max.setValue((int) ped.getValor());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao adicionar o valor, adicionar manualmente: " + ped.getValor());
        }

//        ped.getAmbiente();
//        ped.getEmail();
//        ped.getId();
//        ped.getLargura_porta();
//        ped.getMao_obra();
//        ped.getPossui_janela();
//        ped.getPossui_porta();
//        ped.getValor();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Ok;
    private javax.swing.JButton btn_cancelar;
    private javax.swing.JButton btn_conAdicionar;
    private javax.swing.JButton btn_conLimpar;
    private javax.swing.JButton btn_conRemover;
    private javax.swing.JButton btn_limpar;
    private javax.swing.JButton btn_nova;
    private javax.swing.JButton btn_verificar;
    private javax.swing.JCheckBox chk_habilita;
    private javax.swing.JCheckBox chk_rf;
    private javax.swing.JCheckBox chk_ru;
    private javax.swing.JCheckBox chk_st;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane_pai;
    private javax.swing.JLabel lbl_valTotal;
    private javax.swing.JPanel pnl_alturaLargura;
    private javax.swing.JPanel pnl_ambiente;
    private javax.swing.JPanel pnl_botoes;
    private javax.swing.JPanel pnl_filho;
    private javax.swing.JPanel pnl_maxMin;
    private javax.swing.JPanel pnl_multiplicacao;
    private javax.swing.JPanel pnl_portaJanela;
    private javax.swing.JPanel pnl_valor;
    private javax.swing.ButtonGroup rdGrup_janelas;
    private javax.swing.ButtonGroup rdGrup_maoDeObra;
    private javax.swing.ButtonGroup rdGrup_portas;
    private javax.swing.JSlider sld_max;
    private javax.swing.JSlider sld_min;
    private javax.swing.JTable tb_construcoes;
    private javax.swing.JTable tb_itens;
    private javax.swing.JTable tb_materiais;
    private static javax.swing.JFormattedTextField txt_altura;
    private javax.swing.JFormattedTextField txt_janela;
    private javax.swing.JFormattedTextField txt_janelaVezes1;
    private javax.swing.JFormattedTextField txt_janelaVezes2;
    private javax.swing.JFormattedTextField txt_largura;
    private javax.swing.JFormattedTextField txt_max;
    private javax.swing.JFormattedTextField txt_min;
    private javax.swing.JFormattedTextField txt_porta;
    private javax.swing.JFormattedTextField txt_portaVezes1;
    private javax.swing.JFormattedTextField txt_portaVezes2;
    // End of variables declaration//GEN-END:variables
}
