package cmd.novo.tela;

import cmd.DAO.ItemDAO;
import cmd.controle.ClienteController;
import cmd.controle.OrcamentoController;
import cmd.entidade.Cliente;
import cmd.entidade.Endereco;
import cmd.entidade.Item;
import cmd.entidade.Orcamento;
import cmd.entidade.PessoaFisica;
import cmd.entidade.PessoaJuridica;
import cmd.novo.GerenteDeJanelas;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Font.FontFamily;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Color;
import java.awt.Desktop;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Usuario
 */
public class TOrcamento extends javax.swing.JInternalFrame {

    private int linCliente = -1;
    private int linEndereco = -1;
    private List<Cliente> listaClientes = null;
    private List<Endereco> listaEnderecos = null;
    private List<Item> listaItens = null;

    OrcamentoController oControle = new OrcamentoController();

    TCarregamento tCarregamento = new TCarregamento(null, true);
    GerenteDeJanelas gerenteDeJanelas;

    public static TOrcamento tCalculoOrcamento;

    public static TOrcamento getInstancia(boolean limpo) {
        if (tCalculoOrcamento == null) {
            tCalculoOrcamento = new TOrcamento();
        }

        if (limpo) {
            tCalculoOrcamento.limpar();
        }
        tCalculoOrcamento.exibirDataAtual();
        return tCalculoOrcamento;
    }

    /**
     * Creates new form TCalculoOrcamento
     */
    public TOrcamento() {
        initComponents();
        gerenteDeJanelas = new GerenteDeJanelas(TPrincipal.jDesktopPane1);
        getContentPane().setBackground(Color.WHITE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tb_clientes = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tb_enderecos = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tb_itens = new javax.swing.JTable();
        btn_cadastrarOrca = new javax.swing.JButton();
        btn_cadCliente = new javax.swing.JButton();
        btn_salvar = new javax.swing.JButton();
        btn_limpar = new javax.swing.JButton();
        btn_sair = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        lb_dataHora = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lb_valorFinal = new javax.swing.JLabel();
        cmb_cliente = new javax.swing.JComboBox();
        bt_folha = new javax.swing.JButton();
        bt_folha1 = new javax.swing.JButton();

        setClosable(true);
        setTitle("Calculo do Orçamento");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Bem-Vindo a Área de Orçamentos");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Selecione o Cliente:");

        tb_clientes.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tb_clientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "CPF", "Nome", "Data", "Data de Inscrição"
            }
        ));
        tb_clientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tb_clientesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tb_clientes);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Selecione o local de entrega (Está vinculado ao Cliente selecionado):");

        tb_enderecos.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tb_enderecos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Cep", "Logradouro", "Numero", "Complemento", "Bairro", "UF"
            }
        ));
        tb_enderecos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tb_enderecosMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tb_enderecos);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Itens do orçamento são listados abaixo:");

        tb_itens.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tb_itens.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Cód. construção", "Tipo construção", "Altura (m)", "Largura (m)", "Área da porta (m²)", "Área da janela (m²)", "Preço total"
            }
        ));
        jScrollPane3.setViewportView(tb_itens);

        btn_cadastrarOrca.setBackground(new java.awt.Color(153, 153, 255));
        btn_cadastrarOrca.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btn_cadastrarOrca.setText("Novo orçamento...");
        btn_cadastrarOrca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cadastrarOrcaActionPerformed(evt);
            }
        });

        btn_cadCliente.setBackground(new java.awt.Color(153, 153, 255));
        btn_cadCliente.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btn_cadCliente.setText("Cadastrar um Cliente");
        btn_cadCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cadClienteActionPerformed(evt);
            }
        });

        btn_salvar.setBackground(new java.awt.Color(153, 153, 255));
        btn_salvar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btn_salvar.setText("Salvar");
        btn_salvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_salvarActionPerformed(evt);
            }
        });

        btn_limpar.setBackground(new java.awt.Color(153, 153, 255));
        btn_limpar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btn_limpar.setText("Limpar");
        btn_limpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_limparActionPerformed(evt);
            }
        });

        btn_sair.setBackground(new java.awt.Color(153, 153, 255));
        btn_sair.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btn_sair.setText("Sair");
        btn_sair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_sairActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Data:");

        lb_dataHora.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lb_dataHora.setText("##/##/#### - ##:##");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("Valor Final:");

        lb_valorFinal.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lb_valorFinal.setText("###,##");

        cmb_cliente.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cmb_cliente.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Pessoa Fisica", "Pessoa Juridica" }));
        cmb_cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_clienteActionPerformed(evt);
            }
        });

        bt_folha.setBackground(new java.awt.Color(153, 153, 255));
        bt_folha.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        bt_folha.setText("Gerar Folha de Orçamento Pessoa Jurídica");
        bt_folha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_folhaActionPerformed(evt);
            }
        });

        bt_folha1.setBackground(new java.awt.Color(153, 153, 255));
        bt_folha1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        bt_folha1.setText("Gerar Folha de Orçamento Pessoa Física");
        bt_folha1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_folha1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(229, 229, 229))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btn_salvar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_limpar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lb_valorFinal)
                                .addGap(18, 18, 18)
                                .addComponent(btn_sair))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lb_dataHora))
                                    .addComponent(jLabel3))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 307, Short.MAX_VALUE)
                                .addComponent(bt_folha1, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(bt_folha, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(29, 29, 29)
                        .addComponent(btn_cadastrarOrca)
                        .addGap(37, 37, 37))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmb_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_cadCliente)
                        .addGap(29, 29, 29))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(43, 43, 43))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(lb_dataHora))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(cmb_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_cadCliente))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btn_cadastrarOrca, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bt_folha)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bt_folha1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(lb_valorFinal))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btn_salvar)
                        .addComponent(btn_limpar)
                        .addComponent(btn_sair)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_cadClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cadClienteActionPerformed
        try {
            gerenteDeJanelas.abrirJanelas(TCliente.getInstancia());
        } catch (IllegalArgumentException e) {
            gerenteDeJanelas.abrirJanelas(TCliente.getInstancia());
            //System.err.println(e);//ERRO ! - Erro - contornado.... retirar todo o try
        }
    }//GEN-LAST:event_btn_cadClienteActionPerformed

    private void btn_cadastrarOrcaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cadastrarOrcaActionPerformed
        Thread t = new Thread() {
            @Override
            public void run() {
                try {
                    gerenteDeJanelas.abrirJanelas(TCalculo.getInstancia());
                } catch (IllegalArgumentException e) {
                    gerenteDeJanelas.abrirJanelas(TCalculo.getInstancia());
                    //System.err.println(e);//ERRO ! - Erro - contornado.... retirar todo o try
                }
                fecharJanelaCarregamento();
            }
        };
        t.start();
        abrirJanelaCarregamento();
    }//GEN-LAST:event_btn_cadastrarOrcaActionPerformed

    private void cmb_clienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_clienteActionPerformed
        if (cmb_cliente.getSelectedIndex() == 0) {//Pessoa Fisica
            listarPessoasFisicas();
        }
        if (cmb_cliente.getSelectedIndex() == 1) {//Pessoa Juridica
            listarPessoasJuridicas();
        }
    }//GEN-LAST:event_cmb_clienteActionPerformed

    private void tb_clientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tb_clientesMouseClicked
        if (evt.getClickCount() == 1) {
            linCliente = tb_clientes.getSelectedRow();
            listarEnderecos();
        }
    }//GEN-LAST:event_tb_clientesMouseClicked

    private void tb_enderecosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tb_enderecosMouseClicked
        if (evt.getClickCount() == 1) {
            linEndereco = tb_enderecos.getSelectedRow();
        }
    }//GEN-LAST:event_tb_enderecosMouseClicked

    private void btn_salvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_salvarActionPerformed
        salvar();
    }//GEN-LAST:event_btn_salvarActionPerformed

    private void btn_limparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_limparActionPerformed
        limpar();
    }//GEN-LAST:event_btn_limparActionPerformed

    private void btn_sairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_sairActionPerformed
        dispose();
    }//GEN-LAST:event_btn_sairActionPerformed

    private void bt_folhaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_folhaActionPerformed
        gerarelatoriopessoafisica();
    }//GEN-LAST:event_bt_folhaActionPerformed

    private void bt_folha1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_folha1ActionPerformed
        
    }//GEN-LAST:event_bt_folha1ActionPerformed

    private void salvar() {
        if (!validar()) {
            return;
        }

        Set<Item> setItens = new LinkedHashSet<>();
        Orcamento o = new Orcamento();
        o.setCliente(listaClientes.get(linCliente));
        o.setEndereco(listaEnderecos.get(linEndereco));
        o.setDataHora(new Date());
        o.setXdead(false);
        for (Item i : listaItens) {
            i.setOrcamento(o);
            setItens.add(i);
        }
        o.setItems(setItens);

        if (oControle.inserirOrcamento(o)) {
            JOptionPane.showMessageDialog(rootPane, "Orçamento realizado com sucesso.");
        } else {
            JOptionPane.showMessageDialog(rootPane, "Não foi possível realizar o orçamento.");
        }
    }

    private void limpar() {
        limparTabelas();
        lb_valorFinal.setText("###,##");
        cmb_cliente.setSelectedIndex(0);
    }

    private boolean validar() {
        if (linCliente < 0) {
            JOptionPane.showMessageDialog(rootPane, "Selecione o cliente.");
            return false;
        }
        if (linEndereco < 0) {
            JOptionPane.showMessageDialog(rootPane, "Selecione o endereço.");
            return false;
        }
        if (listaItens == null || listaItens.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Defina os itens do orçamento.");
            return false;
        }
        return true;
    }

    @SuppressWarnings("unchecked")
    private void listarPessoasFisicas() {
        limparTClientes();
        limparTEnderecos();
        listaClientes = new ArrayList<>();

        ClienteController ccont = new ClienteController();
        List<PessoaFisica> lisPf = ccont.listarPessoasFisicas();

        Vector tableHeaders = new Vector();
        tableHeaders.add("Cód. cliente");
        tableHeaders.add("CPF");
        tableHeaders.add("Nome");
        tableHeaders.add("Data de Nascimento");
        tableHeaders.add("Data da inscrição");

        Vector tableData = new Vector();
        Vector reg;
        for (PessoaFisica pf : lisPf) {
            listaClientes.add(pf.getCliente());
            reg = new Vector();
            reg.add(pf.getCodCliente());
            reg.add(pf.getCpf());
            reg.add(pf.getNome());
            reg.add(pf.getDataNascimento().toString());
            reg.add(pf.getCliente().getDataInscricao().toString());
            tableData.add(reg);
        }
        tb_clientes.setModel(new DefaultTableModel(tableData, tableHeaders));
        linCliente = -1;
    }

    @SuppressWarnings("unchecked")
    private void listarPessoasJuridicas() {
        limparTClientes();
        limparTEnderecos();
        listaClientes = new ArrayList<>();

        ClienteController ccont = new ClienteController();
        List<PessoaJuridica> cli = ccont.listarPessoasJuridicas();

        Vector tableHeaders = new Vector();
        tableHeaders.add("Cód. cliente");
        tableHeaders.add("CNPJ");
        tableHeaders.add("Razão social");
        tableHeaders.add("Data de fundação");
        tableHeaders.add("Data da inscrição");

        Vector tableData = new Vector();
        Vector reg;
        for (PessoaJuridica pj : cli) {
            listaClientes.add(pj.getCliente());
            reg = new Vector();
            reg.add(pj.getCodCliente());
            reg.add(pj.getCnpj());
            reg.add(pj.getRazaoSocial());
            reg.add(pj.getDataFundacao().toString());
            reg.add(pj.getCliente().getDataInscricao().toString());
            tableData.add(reg);
        }
        tb_clientes.setModel(new DefaultTableModel(tableData, tableHeaders));
        linCliente = -1;
    }

    @SuppressWarnings("unchecked")
    private void listarEnderecos() {
        if (linCliente < 0) {
            return;
        }

        limparTEnderecos();
        listaEnderecos = new ArrayList<>();

        Endereco en = listaClientes.get(linCliente).getEndereco();
        listaEnderecos.add(en);

        Vector tableHeaders = new Vector();
        tableHeaders.add("CEP");
        tableHeaders.add("Logradouro");
        tableHeaders.add("Número");
        tableHeaders.add("Complemento");
        tableHeaders.add("Bairro");
        tableHeaders.add("UF");
        Vector reg = new Vector();
        reg.add(en.getCep());
        reg.add(en.getLogradouro());
        reg.add(en.getNumero());
        reg.add(en.getComplemento());
        reg.add(en.getBairro());
        reg.add(en.getUf());
        Vector tableData = new Vector();
        tableData.add(reg);
        tb_enderecos.setModel(new DefaultTableModel(tableData, tableHeaders));
        linEndereco = -1;
    }

    @SuppressWarnings("unchecked")
    public void listarItens(List<Item> li) {
        limparTItens();
        listaItens = li;
        double valTotal = 0.0;

        Vector tableHeaders = new Vector();
        tableHeaders.add("Cód. construção");
        tableHeaders.add("Tipo construção");
        tableHeaders.add("Altura (m)");
        tableHeaders.add("Largura (m)");
        tableHeaders.add("Área da porta (m²)");
        tableHeaders.add("Área da janela (m²)");
        tableHeaders.add("Preço total");

        Vector tableData = new Vector();
        Vector reg;
        for (Item it : listaItens) {
            valTotal += it.getPrecoTotal().doubleValue();

            reg = new Vector();
            reg.add(it.getConstrucao().getCodConstrucao());
            if (it.getConstrucao().getParede() != null && it.getConstrucao().getForro() == null) {
                reg.add("Parede");
            } else if (it.getConstrucao().getParede() == null && it.getConstrucao().getForro() != null) {
                reg.add("Forro");
            } else {
                reg.add("Desconhecido");
            }
            reg.add(it.getAltura());
            reg.add(it.getLargura());
            reg.add(it.getAreaPorta());
            reg.add(it.getAreaJanela());
            reg.add(it.getPrecoTotal());
            tableData.add(reg);
        }
        tb_itens.setModel(new DefaultTableModel(tableData, tableHeaders));
        String valTotalF = NumberFormat.getCurrencyInstance().format(valTotal);
        lb_valorFinal.setText(valTotalF);
    }

    private void limparTabelas() {
        limparTClientes();
        limparTEnderecos();
        limparTItens();
    }

    private void limparTClientes() {
        tb_clientes.setModel(new javax.swing.table.DefaultTableModel(
                null,
                new String[]{
                    "CPF", "Nome", "Data", "Data de Inscrição"
                }
        ));
        listaClientes = null;
        linCliente = -1;
    }

    private void limparTEnderecos() {
        tb_enderecos.setModel(new javax.swing.table.DefaultTableModel(
                null,
                new String[]{
                    "Cep", "Logradouro", "Numero", "Complemento", "Bairro", "UF"
                }
        ));
        listaEnderecos = null;
        linEndereco = -1;
    }

    private void limparTItens() {
        tb_itens.setModel(new javax.swing.table.DefaultTableModel(
                null,
                new String[]{
                    "Cód. construção", "Tipo construção", "Altura (m)", "Largura (m)", "Área da porta (m²)", "Área da janela (m²)", "Preço total"
                }
        ));
        listaItens = null;
    }

    private void exibirDataAtual() {
        try {
            SimpleDateFormat fData = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
            lb_dataHora.setText(fData.format(new Date(System.currentTimeMillis())));
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    private void abrirJanelaCarregamento() {
        tCarregamento.setVisible(true);
    }

    private void fecharJanelaCarregamento() {
        tCarregamento.setVisible(false);
    }

    public void gerarelatoriopessoafisica() {
        int linha = tb_clientes.getSelectedRow();
        int linha2 = tb_enderecos.getSelectedRow();
        int linha3 = tb_itens.getSelectedRow();
        List<Item> listaItens = null;
        ItemDAO dao = new ItemDAO();
        listaItens = dao.listar();
        if (linha != -1 && linha2 != -1) {

            String cpf = tb_clientes.getValueAt(linha, 1).toString();
            String nome = tb_clientes.getValueAt(linha, 2).toString();
            String cep = tb_enderecos.getValueAt(linha2, 0).toString();
            String logradouro = tb_enderecos.getValueAt(linha2, 1).toString();
            String numero = tb_enderecos.getValueAt(linha2, 2).toString();
            String complemento = tb_enderecos.getValueAt(linha2, 3).toString();
            String bairro = tb_enderecos.getValueAt(linha2, 4).toString();
            String uf = tb_enderecos.getValueAt(linha2, 5).toString();
            String valor_final = lb_valorFinal.getText();
            Document doc = new Document();
            String arquivoPdf = "Folhagenerica.pdf";
            Font font;

            font = new Font(FontFamily.TIMES_ROMAN, 32, Font.BOLD, BaseColor.BLACK);

            try {

                PdfWriter.getInstance(doc, new FileOutputStream(arquivoPdf));
                doc.open();
                Paragraph paragrafo = new Paragraph("Folha de orçamento Sistema C.M.D", font);
                paragrafo.setAlignment(Element.ALIGN_CENTER);
                Paragraph mensagem = new Paragraph("Boa Tarde Sr: \t" + nome + ", \n" + "Por favor leia atentamente todos os itens desta folha de orçamento \n");
                mensagem.setAlignment(Element.ALIGN_LEFT);
                doc.add(paragrafo);
                paragrafo = new Paragraph(" ");
                doc.add(paragrafo);
                doc.add(mensagem);
                mensagem = new Paragraph(" ");
                doc.add(mensagem);
                Paragraph CPF = new Paragraph("CPF: \t" + cpf);
                doc.add(CPF);
                Paragraph Nome = new Paragraph("Nome: \t" + nome);
                doc.add(Nome);
                Paragraph Cep = new Paragraph("CEP: \t" + cep);
                doc.add(Cep);
                Paragraph Logradouro = new Paragraph("Logradouro: \t" + logradouro);
                doc.add(Logradouro);
                Paragraph Numero = new Paragraph("Numero: \t" + numero);
                doc.add(Numero);
                Paragraph Complemento = new Paragraph("Complemento: \t" + complemento);
                doc.add(Complemento);
                Paragraph Bairro = new Paragraph("Bairro: \t" + bairro);
                doc.add(Bairro);
                Paragraph Uf = new Paragraph("Uf: \t" + uf);
                doc.add(Uf);
                Uf = new Paragraph(" ");
                doc.add(Uf);

                PdfPTable table = new PdfPTable(8);
                PdfPCell cel0 = new PdfPCell(new Paragraph("Lista de Itens comprados"));
                cel0.setHorizontalAlignment(Element.ALIGN_CENTER);
                cel0.setColspan(8);
                PdfPCell cel1 = new PdfPCell(new Paragraph("Codigo da construção"));
                cel1.setHorizontalAlignment(Element.ALIGN_CENTER);
                cel1.setColspan(2);
                PdfPCell cel2 = new PdfPCell(new Paragraph("Tipo da construção"));
                cel2.setHorizontalAlignment(Element.ALIGN_CENTER);
                cel2.setColspan(2);
                PdfPCell cel3 = new PdfPCell(new Paragraph("Altura"));
                cel3.setHorizontalAlignment(Element.ALIGN_CENTER);
                cel3.setColspan(2);
                PdfPCell cel4 = new PdfPCell(new Paragraph("Largura"));
                cel4.setHorizontalAlignment(Element.ALIGN_CENTER);
                cel4.setColspan(2);
                PdfPCell cel5 = new PdfPCell(new Paragraph("Área da porta"));
                cel5.setHorizontalAlignment(Element.ALIGN_CENTER);
                cel5.setColspan(2);
                PdfPCell cel6 = new PdfPCell(new Paragraph("Área da Janela"));
                cel6.setHorizontalAlignment(Element.ALIGN_CENTER);
                cel6.setColspan(2);
                PdfPCell cel7 = new PdfPCell(new Paragraph("Preço"));
                cel7.setHorizontalAlignment(Element.ALIGN_CENTER);
                cel7.setColspan(2);

                table.addCell(cel0);
                table.addCell(cel1);
                table.addCell(cel2);
                table.addCell(cel3);
                table.addCell(cel4);
                table.addCell(cel5);
                table.addCell(cel6);
                table.addCell(cel7);

                for (Item it : listaItens) {
                    cel1 = new PdfPCell(new Paragraph(it.getCodItem().toString()));
                    cel2 = new PdfPCell(new Paragraph(it.getConstrucao().toString()));
                    cel3 = new PdfPCell(new Paragraph(it.getAltura().floatValue()));
                    cel4 = new PdfPCell(new Paragraph(it.getLargura().floatValue()));
                    cel5 = new PdfPCell(new Paragraph(it.getAreaPorta().floatValue()));
                    cel6 = new PdfPCell(new Paragraph(it.getAreaJanela().floatValue()));
                    cel7 = new PdfPCell(new Paragraph(it.getPrecoTotal().floatValue()));

                    table.addCell(cel1);
                    table.addCell(cel2);
                    table.addCell(cel3);
                    table.addCell(cel4);
                    table.addCell(cel5);
                    table.addCell(cel6);
                    table.addCell(cel7);
                }
                doc.add(table);
                Paragraph corpo = new Paragraph("Eu: ");
                Chunk underline = new Chunk(nome + ",");
                underline.setUnderline(0.1f, -2f);
                corpo.add(underline);
                doc.add(corpo);
                Paragraph corpo2 = new Paragraph("declaro estar ciente de todos os dados apresentados nesta folha de orçamento e concordo com o valor de "
                        + valor_final);
                doc.add(corpo2);
                Date data = new Date();
                Paragraph datas = new Paragraph("São Caetano do Sul: \t" + data);
                doc.add(datas);
                doc.close();
                Desktop.getDesktop().open(new File(arquivoPdf));
            } 
            catch (DocumentException e) 
            {
               System.err.println("Erro ao criar docmuento: \n" + e);
            } catch (IOException ex) 
            {
                Logger.getLogger(TOrcamento.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    public void gerarrelatoriopessoajuridica()
    {
        // ainda a fazer...
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt_folha;
    private javax.swing.JButton bt_folha1;
    private javax.swing.JButton btn_cadCliente;
    private javax.swing.JButton btn_cadastrarOrca;
    private javax.swing.JButton btn_limpar;
    private javax.swing.JButton btn_sair;
    private javax.swing.JButton btn_salvar;
    private javax.swing.JComboBox cmb_cliente;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lb_dataHora;
    private javax.swing.JLabel lb_valorFinal;
    private javax.swing.JTable tb_clientes;
    private javax.swing.JTable tb_enderecos;
    private javax.swing.JTable tb_itens;
    // End of variables declaration//GEN-END:variables
}
